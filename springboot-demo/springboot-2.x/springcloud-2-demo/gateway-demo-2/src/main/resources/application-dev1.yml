server:
  port: 8081
spring:
  profiles:
    #active: after_route
    #active: header_route
    #active: cookie_route
    #active: host_route
    #active: method_route
    #active: path_route
    active: query_route

---
#Query Route Predicate Factory
spring:
  cloud:
    gateway:
      routes:
      - id: query_route
        uri: http://httpbin.org:80/get
        predicates:
        #Query Route Predicate Factory 需要2个参数:一个参数名和一个参数值的正则表达式。
        #配置了请求中含有参数foo，并且foo的值匹配ba.，则请求命中路由，
        #比如一个请求中含有参数名为foo，值的为bar，能够被正确路由转发
        #模拟请求的命令如下：
        #curl localhost:8081?foo=bar
        #Query Route Predicate Factory也可以只填一个参数，填一个参数时，则只匹配参数名，
        #即请求的参数中含有配置的参数名，则命中路由。
        #配置了请求参数中含有参数名为foo 的参数将会被请求转发到uri为http://httpbin.org:80/get。
        #- Query=foo
        - Query=foo, ba.
  profiles: query_route

---
#Path Route Predicate Factory
spring:
  cloud:
    gateway:
      routes:
      - id: path_route
        uri: http://httpbin.org:80/get
        predicates:
        #Path Route Predicate Factory 需要一个参数: 一个spel表达式，应用匹配路径。
        #所有的请求路径满足/foo/{segment}的请求将会匹配并被路由，
        #比如/foo/1 、/foo/bar的请求，将会命中匹配，并成功转发
        #使用curl模拟一个请求localhost:8081/foo/dew，执行之后会返回正确的请求结果。
        #curl localhost:8081/foo/dew
        - Path=/foo/{segment}
  profiles: path_route

---
#Method Route Predicate Factory
spring:
  cloud:
    gateway:
      routes:
      - id: method_route
        uri: http://httpbin.org:80/get
        predicates:
        #Method Route Predicate Factory 需要一个参数，即请求的类型。比如GET类型的请求都转发到此路由
        #所有的GET类型的请求都会路由转发到配置的uri
        #使用 curl命令模拟 get类型的请求，会得到正确的返回结果。
        #curl localhost:8081
        #使用 curl命令模拟 post请求，则返回404结果
        #curl -XPOST localhost:8081
        - Method=GET
  profiles: method_route

---
#Host Route Predicate Factory
spring:
  cloud:
    gateway:
      routes:
      - id: host_route
        uri: http://httpbin.org:80/get
        predicates:
        #Host Route Predicate Factory需要一个参数即hostname，它可以使用. * 等去匹配host。
        #这个参数会匹配请求头中的host的值，一致，则请求正确转发。
        #请求头中含有Host为fangzhipeng.com的请求将会被路由转发转发到配置的uri
        #执行以下的curl命令，请求会返回正确的请求结果
        #curl -H 'Host:www.fangzhipeng.com' localhost:8081
        - Host=**.fangzhipeng.com
  profiles: host_route

---
#Cookie Route Predicate Factory
spring:
  cloud:
    gateway:
      routes:
      - id: cookie_route
        uri: http://httpbin.org:80/get
        predicates:
        #Cookie Route Predicate Factory需要2个参数，一个时cookie名字，另一个时值，可以为正则表达式
        #它用于匹配请求中，带有该名称的cookie和cookie匹配正则表达式的请求。
        #请求带有cookie名为 name, cookie值为forezp 的请求将都会转发到uri为 http://httpbin.org:80/get的地址上
        #使用curl命令进行请求，在请求中带上 cookie，会返回正确的结果，否则，请求报404错误。
        #curl -H 'Cookie:name=forezp' localhost:8081
        - Cookie=name, forezp
  profiles: cookie_route

---
#Header Route Predicate Factory
spring:
  cloud:
    gateway:
      routes:
      - id: header_route
        uri: http://httpbin.org:80/get
        predicates:
        #Header Route Predicate Factory需要2个参数，一个是header名，另外一个header值，该值可以是一个正则表达式。
        #当此断言匹配了请求的header名和值时，断言通过，进入到router的规则中去
        #当请求的Header中有X-Request-Id的header名，且header值为数字时，请求会被路由到配置的 uri. 使用curl执行以下命令:
        #curl -H 'X-Request-Id:1' localhost:8081
        - Header=X-Request-Id, \d+
  profiles: header_route

---
#After Route Predicate Factory
spring:
  cloud:
    gateway:
      #当请求的时间在这个配置的时间之后，请求会被路由到http://httpbin.org:80/get。
      routes:
      - id: after_route  #每个router都需要一个唯一的id
        uri: http://httpbin.org:80/get #uri配置的是将请求路由转发到哪里，本案例全部路由到http://httpbin.org:80/get。
        #在这里需要注意的是predicates的After这个配置，遵循的契约大于配置的思想，
        #它实际被AfterRoutePredicateFactory这个类所处理，
        #这个After就是指定了它的Gateway web handler类为AfterRoutePredicateFactory，
        #同理，其他类型的predicate也遵循这个规则
        #跟时间相关的predicates还有Before Route Predicate Factory、Between Route Predicate Factory
        predicates:
        #可配置一个时间，当请求的时间在配置时间之后，才交给 router去处理。否则则报错，不通过路由。
        #predicates： After=2017-01-20T17:42:47.789-07:00[America/Denver]
        #会被解析成PredicateDefinition对象（name =After ，args= 2017-01-20T17:42:47.789-07:00[America/Denver]）
        - After=2017-01-20T17:42:47.789-07:00[America/Denver]
      #Header Route Predicate Factory
  profiles: after_route