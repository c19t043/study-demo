# 默认的 8080 我们将它改成 9090
#server.port=9090
# 未定义上下文路径之前 地址是 http://localhost:8080 定义了后 http://localhost:9090 你能在tomcat做的事情，配置文件都可以
#server.servlet.context-path=/chapter1

#命令启动Jar包，修改配置
#这种命令会被 SpringBoot 解析，且优先级最高
#仔细观察spring.profiles.active=test、my1.age=32
#java -jar chapter2-0.0.1-SNAPSHOT.jar --spring.profiles.active=test --my1.age=32。
#java -jar app.jar --debug=true

#模板热部署
# 将spring.thymeleaf.cache 属性设置成 false
spring.thymeleaf.cache=false

#修改默认favicon.ico 图标
#只需要在src/main/static/目录下放置一张名为favicon.ico就可以了


my1.age=22
my1.name=battcn

#spring.profiles.active=dev

#该配置只对 嵌入式容器、Spring、Hibernate生效，
#我们自己的项目想要输出 DEBUG 需要额外配置（配置规则：logging.level.<logger-name>=<level>）
#debug=true

#logging.level.root = WARN
#logging.level.org.springframework.web = DEBUG
#logging.level.org.hibernate = ERROR

#比如 mybatis sql日志
#logging.level.org.mybatis = INFO
#logging.level.mapper所在的包 = DEBUG
#logging.level.cn.cjf.springboot.mapper = DEBUG

#logging.pattern.console： 定义输出到控制台的格式（不支持JDK Logger）
#logging.pattern.file： 定义输出到文件的格式（不支持JDK Logger）

#如果终端支持 ANSI，默认情况下会给日志上个色，提高可读性，
# 可以在配置文件中设置 spring.output.ansi.enabled 来改变默认值
#ALWAYS： 启用 ANSI 颜色的输出。
#DETECT： 尝试检测 ANSI 着色功能是否可用。
#NEVER： 禁用 ANSI 颜色的输出。

#Level	Color
#WARN	Yellow
#FATAL、ERROR	Red
#INFO、DEBUG、TRACE	Green
#如果想修改日志默认色值，可以通过使用 %clr 关键字转换。
# 比如想使文本变为黄色 %clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){yellow}。
# 目前支持的颜色有（blue、cyan、faint、green、magenta、red、yellow）

#文件保存
#默认情况下，SpringBoot 仅将日志输出到控制台，不会写入到日志文件中去。
# 如果除了控制台输出之外还想写日志文件，则需要在application.properties 设置logging.file 或 logging.path 属性。
#logging.file： 将日志写入到指定的 文件 中，默认为相对路径，可以设置成绝对路径
#logging.path： 将名为 spring.log 写入到指定的 文件夹 中，如（/var/log）

#日志文件在达到 10MB 时进行切割，产生一个新的日志文件（如：spring.1.log、spring.2.log），
# 新的日志依旧输出到 spring.log 中去，默认情况下会记录 ERROR、WARN、INFO 级别消息。
#logging.file.max-size： 限制日志文件大小
#logging.file.max-history： 限制日志保留天数

#自定义日志配置
#由于日志在 ApplicationContext 之前就初始化好了，所以 SpringBoot 为我们提供了 logging.config 属性，
# 方便我们配置自定义日志文件。默认情况它会根据日志的依赖自动加载。
#Logging System	   Customization
#JDK (Java Util Logging)	logging.properties
#Log4j2、ERROR	  log4j2-spring.xml 或 log4j2.xml
#Logback	  logback-spring.xml、logback-spring.groovy、logback.xml、logback.groovy

#Logback扩展配置
#该扩展配置仅适用 logback-spring.xml 或者设置 logging.config 属性的文件，
# 因为 logback.xml 加载过早，因此无法获取 SpringBoot的一些扩展属性
#使用扩展属性 springProfile 与 springProperty 让你的 logback-spring.xml 配置显得更有逼格，
# 当别人还在苦苦挣扎弄logback-{profile}.xml的时候 你一个文件就搞定了

